---
import Layout from '../../layouts/Layout.astro';
import { useState } from 'react';
---

<Layout title="JobHub - Configuración">
  <div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold mb-6">Configuración</h1>
    
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 max-w-2xl mx-auto">
      <div class="mb-6">
        <h2 class="text-xl font-semibold mb-4">Preferencias de Tema</h2>
        <div class="flex items-center space-x-4">
          <button 
            id="lightTheme" 
            class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600"
          >
            Tema Claro
          </button>
          <button 
            id="darkTheme" 
            class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600"
          >
            Tema Oscuro
          </button>
          <button 
            id="systemTheme" 
            class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600"
          >
            Usar Preferencia del Sistema
          </button>
        </div>
      </div>
      
      <div class="mb-6">
        <h2 class="text-xl font-semibold mb-4">Configuración de API</h2>
        <div class="mb-4">
          <label for="apiKey" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Clave de API de Gemini (para funciones de IA)
          </label>
          <input 
            type="password" 
            id="apiKey" 
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
            placeholder="Ingresa tu clave de API de Gemini"
          />
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Esta clave se almacenará localmente en tu navegador.
          </p>
        </div>
        <button 
          id="saveApiKey" 
          class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        >
          Guardar Clave de API
        </button>
      </div>
      
      <div class="mb-6">
        <h2 class="text-xl font-semibold mb-4">Notificaciones</h2>
        <div class="flex items-center mb-4">
          <input 
            type="checkbox" 
            id="emailNotifications" 
            class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
          />
          <label for="emailNotifications" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
            Recibir notificaciones por correo electrónico
          </label>
        </div>
        <div class="flex items-center">
          <input 
            type="checkbox" 
            id="browserNotifications" 
            class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
          />
          <label for="browserNotifications" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
            Recibir notificaciones del navegador
          </label>
        </div>
      </div>
      
      <div>
        <h2 class="text-xl font-semibold mb-4">Privacidad</h2>
        <div class="flex items-center">
          <input 
            type="checkbox" 
            id="dataCollection" 
            class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
          />
          <label for="dataCollection" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
            Permitir recopilación de datos anónimos para mejorar el servicio
          </label>
        </div>
      </div>
      
      <button 
        id="saveSettings" 
        class="mt-6 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
      >
        Guardar Configuración
      </button>
    </div>
  </div>
</Layout>

<script>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Theme toggle functionality
    const lightThemeBtn = document.getElementById('lightTheme');
    const darkThemeBtn = document.getElementById('darkTheme');
    const systemThemeBtn = document.getElementById('systemTheme');
    
    // Check if theme is stored in localStorage
    const savedTheme = localStorage.getItem('theme');
    
    if (savedTheme) {
      document.documentElement.classList.toggle('dark', savedTheme === 'dark');
    }
    
    if (lightThemeBtn) {
      lightThemeBtn.addEventListener('click', () => {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      });
    }
    
    if (darkThemeBtn) {
      darkThemeBtn.addEventListener('click', () => {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      });
    }
    
    if (systemThemeBtn) {
      systemThemeBtn.addEventListener('click', () => {
        localStorage.removeItem('theme');
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      });
    }
    
    // API Key functionality
    const apiKeyInput = document.getElementById('apiKey') as HTMLInputElement;
    const saveApiKeyBtn = document.getElementById('saveApiKey');
    
    // Check if API key is stored in localStorage
    const savedApiKey = localStorage.getItem('geminiApiKey');
    if (savedApiKey && apiKeyInput) {
      apiKeyInput.value = savedApiKey;
    }
    
    if (saveApiKeyBtn && apiKeyInput) {
      saveApiKeyBtn.addEventListener('click', () => {
        const apiKey = apiKeyInput.value.trim();
        if (apiKey) {
          localStorage.setItem('geminiApiKey', apiKey);
          alert('Clave de API guardada exitosamente.');
        } else {
          alert('Por favor ingresa una clave de API válida.');
        }
      });
    }
    
    // Save all settings
    const saveSettingsBtn = document.getElementById('saveSettings');
    const emailNotifications = document.getElementById('emailNotifications') as HTMLInputElement;
    const browserNotifications = document.getElementById('browserNotifications') as HTMLInputElement;
    const dataCollection = document.getElementById('dataCollection') as HTMLInputElement;
    
    // Load saved preferences
    if (emailNotifications) {
      emailNotifications.checked = localStorage.getItem('emailNotifications') === 'true';
    }
    
    if (browserNotifications) {
      browserNotifications.checked = localStorage.getItem('browserNotifications') === 'true';
    }
    
    if (dataCollection) {
      dataCollection.checked = localStorage.getItem('dataCollection') === 'true';
    }
    
    if (saveSettingsBtn) {
      saveSettingsBtn.addEventListener('click', () => {
        if (emailNotifications) {
          localStorage.setItem('emailNotifications', String(emailNotifications.checked));
        }
        
        if (browserNotifications) {
          localStorage.setItem('browserNotifications', String(browserNotifications.checked));
        }
        
        if (dataCollection) {
          localStorage.setItem('dataCollection', String(dataCollection.checked));
        }
        
        alert('Configuración guardada exitosamente.');
      });
    }
  });
</script>